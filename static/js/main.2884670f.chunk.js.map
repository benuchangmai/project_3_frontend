{"version":3,"sources":["Userlogin.js","Popup.js","MessageList.js","SendMessageForm.js","OnlineUsers.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Userlogin","props","state","username","password","url","onChangeUsername","bind","onChangePwd","onSubmit","onChangeUrl","e","this","setState","target","value","preventDefault","className","type","placeholder","onChange","React","Component","Popup","onClick","closePopup","MessageList","togglePopup","scrollToBottom","atBottom","showPopup","messagesEnd","scrollIntoView","behavior","changeScrollState","console","log","handleScroll","element","scrollHeight","scrollTop","clientHeight","renderMessage","message","member","user","text","date","Date","created","getHours","getMinutes","substr","serverMessage","messageType","sender","messageFromMe","sessionStorage","getItem","messageFromSelf","onScroll","messages","map","m","style","float","clear","ref","el","SendMessageForm","OnlineUsers","onlineUsers","renderUsers","User","ChatScreen","token","currentUser","users","streamSource","EventSource","getToken","setMessageList","sendMessage","setUsersList","joinUsersList","partUsersList","resp","tempUsers","Set","joiningUser","joiningMessage","has","partingUser","partingMessage","delete","close","onDisconnect","addEventListener","event","JSON","parse","data","status","disconnectConnection","form","FormData","append","request","XMLHttpRequest","open","setRequestHeader","send","messageListRef","App","currentScreen","currentUsername","onUserloginSubmit","onreadystatechange","readyState","setItem","responseText","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2884670f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css';\r\n\r\nclass Userlogin extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tusername: '',\r\n\t\t\tpassword: '',\r\n\t\t\turl: this.props.url\r\n\t\t}\r\n\t\tthis.onChangeUsername = this.onChangeUsername.bind(this)\r\n\t\tthis.onChangePwd = this.onChangePwd.bind(this)\r\n\t\tthis.onSubmit = this.onSubmit.bind(this)\r\n\t\tthis.onChangeUrl = this.onChangeUrl.bind(this)\r\n\t}\r\n\tonChangeUrl(e){\r\n\t\tthis.setState({\r\n\t\t\turl: e.target.value\r\n\t\t})\r\n\t}\r\n\tonChangeUsername(e){\r\n\t\tthis.setState({\r\n\t\t\tusername: e.target.value\r\n\t\t})\r\n\t}\r\n\tonChangePwd(e){\r\n\t\tthis.setState({\r\n\t\t\tpassword: e.target.value\r\n\t\t})\r\n\t}\r\n\tonSubmit (e){\r\n\t\te.preventDefault()\r\n\t\tthis.props.onSubmit(this.state.username,this.state.password, this.state.url)\r\n\t}\r\n\trender(){\r\n\t\treturn <div>\r\n\t\t<form className=\"login-form\" onSubmit={this.onSubmit}>\r\n\t\t\t<input type = \"text\" value={this.state.url} placeholder=\"Chat URL\" onChange={this.onChangeUrl}/>\r\n\t\t\t<input type = \"text\" placeholder=\"Username\" value={this.state.username} onChange={this.onChangeUsername}/>\r\n\t\t\t<input type = \"password\" placeholder=\"Password\" value={this.state.password} onChange={this.onChangePwd}/> \r\n\t\t\t<input type = \"submit\" className=\"Loginbutton\" value=\"Login\"/>\r\n\t\t</form>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default Userlogin","import React from 'react'\r\n\r\nclass Popup extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='popup'>\r\n        <div className='popup_inner'>\r\n        <button className='popup_click' onClick={this.props.closePopup}>New message(s)</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Popup","import React from 'react'\r\nimport './App.css';\r\nimport Popup from './Popup'\r\n\r\nclass MessageList extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      showPopup: false\r\n    }\r\n    this.atBottom = true\r\n    this.messageFromSelf = true\r\n    this.togglePopup = this.togglePopup.bind(this)\r\n  }\r\n  togglePopup = () => {\r\n    this.scrollToBottom();\r\n    this.atBottom = true;\r\n    this.setState({showPopup: false});\r\n    }\r\n  componentDidMount() {\r\n    if(!this.props.atBottom && this.messageFromSelf){\r\n            this.scrollToBottom();}\r\n    else if(this.props.atBottom){\r\n          this.scrollToBottom();}\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    if(!this.props.atBottom && this.messageFromSelf){\r\n            this.scrollToBottom();}\r\n    else if(this.props.atBottom){\r\n          this.scrollToBottom();}\r\n  }\r\n\r\n  scrollToBottom = () => { \r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n    this.props.changeScrollState(true);\r\n    console.log(\"At bottom: \",true)\r\n    \r\n  }\r\n\r\n  handleScroll = e => {\r\n    let element = e.target\r\n    console.log(element.scrollHeight, element.scrollTop, element.clientHeight)\r\n    if (element.scrollHeight - element.scrollTop - 1 < element.clientHeight) {\r\n      this.props.changeScrollState(true); \r\n      this.atBottom = true\r\n      console.log(\"At bottom from handleScroll: \",true)\r\n      this.setState({showPopup: false})\r\n    }\r\n    else{\r\n      this.props.changeScrollState(false);  \r\n      this.atBottom = false\r\n      console.log(\"At bottom from handleScroll: \",false)\r\n    }\r\n  }\r\n  render() {\r\n    console.log(\"Initial: \", this.atBottom)\r\n    console.log(\"showPopup: \", this.state.showPopup)\r\n    return (\r\n      <ul className = \"MessageList-container\" onScroll={this.handleScroll}>\r\n        {this.props.messages.map(m => this.renderMessage(m))}\r\n        {(this.state.showPopup || !this.atBottom)? <Popup closePopup={this.togglePopup.bind(this)}/>: null}\r\n        <li style={{ float:\"left\", clear: \"both\" }}\r\n        ref={(el) => { this.messagesEnd = el; }}>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  renderMessage = (message) => {\r\n\r\n    const member = message.user;\r\n    const text = message.message;\r\n    var date = new Date(message.created*1000);\r\n    var hours = date.getHours();\r\n    var minutes = \"0\" + date.getMinutes();\r\n    const created = hours + ':' + minutes.substr(-2)\r\n    const serverMessage = member === 'Server';\r\n    const messageType = serverMessage?\r\n    \t\"Server\" : \"Message\";\r\n    const sender = serverMessage?\r\n    \t\"\" : member;\r\n    const currentMember = sessionStorage.getItem( 'currentUsername' );\r\n    const messageFromMe = sender === currentMember;\r\n    const className = messageFromMe ?\r\n      \"Messages-message-currentMember\" : \"Messages-message\";\r\n    if(messageFromMe)\r\n      this.messageFromSelf = true\r\n    else\r\n      this.messageFromSelf = false\r\n    return (\r\n      <li className={messageType} >\r\n      \t<div className = {className}>\r\n  \t      <div className=\"Message-content\">\r\n  \t        <div className=\"username\">\r\n  \t          {sender}\r\n  \t        </div>\r\n  \t        <div className=\"message-body\">\r\n  \t\t        <div className=\"text\">{text}</div>\r\n  \t\t        <div className=\"created\">{created}</div>\r\n  \t        </div>\r\n  \t      </div>\r\n  \t    </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default MessageList","import React from 'react'\r\nimport './App.css';\r\n\r\nclass SendMessageForm extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttext: ''\r\n\t\t}\r\n\t\tthis.onChange = this.onChange.bind(this)\r\n\t\tthis.onSubmit = this.onSubmit.bind(this)\r\n\t}\r\n\r\n\tonChange(e){\r\n\t\tthis.setState({\r\n\t\t\ttext: e.target.value\r\n\t\t})\r\n\t}\r\n\tonSubmit (e){\r\n\t\te.preventDefault()\r\n\t\tthis.props.onSubmit(this.state.text)\r\n\t\tthis.setState({text: ''})\r\n\r\n\t}\r\n\trender(){\r\n\t\treturn <div >\r\n\t\t<form ref=\"form\" className=\"message-form\" onSubmit={this.onSubmit}>\r\n\t\t\t<input className=\"textfield\" type = \"text\" value={this.state.text} placeholder=\"Type your message here\" onChange={this.onChange}/>\r\n\t\t</form>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\nimport './App.css';\r\n\r\nclass OnlineUsers extends React.Component{\r\n\r\n  render() {\r\n    //const {messages} = this.props.messages; list-style-type: none;\r\n    return (\r\n      <ul className = \"OnlineUsers-container\">\r\n        <div className=\"OnlineUsersHeader\">\r\n          <h1 className=\"OnlineUsersText\">Online Users</h1>\r\n        </div>\r\n        {this.props.onlineUsers.map(m => this.renderUsers(m))}\r\n      </ul>\r\n    );\r\n  }\r\n  renderUsers(User) {\r\n\r\n    return (\r\n      <li className=\"OnlineUsers\">\r\n        <div className=\"User\">\r\n         {User}\r\n         </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default OnlineUsers","import React, { Component } from 'react';\r\nimport MessageList from './MessageList'\r\nimport SendMessageForm from './SendMessageForm'\r\nimport OnlineUsers from './OnlineUsers'\r\nimport './App.css';\r\n\r\nclass ChatScreen extends Component{\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t\t    this.state = {\r\n\t\t      messages: [],\r\n\t\t      token: this.props.token,\r\n\t\t      currentUser: this.props.username,\r\n\t\t      users: [],\r\n\t\t      url: this.props.url\r\n\r\n\t\t};\r\n\t\tthis.atBottom = false\r\n\t\tconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    \tconst url = \"http://chat.cs291.com/stream/\";\r\n\t\tthis.streamSource = new EventSource(this.state.url+\"/stream/\"+this.state.token);\r\n\t\tthis.getToken = this.getToken.bind(this);\r\n\t\tthis.setMessageList = this.setMessageList.bind(this);\r\n\t\tthis.sendMessage = this.sendMessage.bind(this);\r\n\t\tthis.setUsersList = this.setUsersList.bind(this);\r\n\t\tthis.joinUsersList = this.joinUsersList.bind(this);\r\n\t\tthis.partUsersList = this.partUsersList.bind(this);\r\n\t\tthis.changeScrollState = this.changeScrollState.bind(this);\r\n  }\r\n  \tgetToken(resp){\r\n\t\tthis.setState({token: resp})\r\n\t}\r\n\r\n\tsetMessageList(resp){\r\n\t\t\r\n\t\tthis.setState({messages: [...this.state.messages,resp]})\t\r\n\t}\r\n\tjoinUsersList(resp){\r\n\t\tconst tempUsers = new Set(this.state.users)\r\n\t\tconst joiningUser = resp.message\r\n\t\tconst joiningMessage = joiningUser + \" has joined the chat\"\r\n\t\tresp.message = joiningMessage\r\n\t\tif(!tempUsers.has(joiningUser)){\r\n\t\t\tthis.setState({users: [...this.state.users,joiningUser],\r\n\t\t\tmessages: [...this.state.messages,resp]})\r\n\t\t}\t\t\r\n\t}\r\n\tpartUsersList(resp){\r\n\t\tconst tempUsers = new Set(this.state.users)\r\n\t\tconst partingUser = resp.message\r\n\t\tconst partingMessage = partingUser + \" has left the chat\"\r\n\t\tresp.message = partingMessage\r\n\t\ttempUsers.delete(partingUser)\r\n\t\tthis.setState({users: [...tempUsers],\r\n\t\tmessages: [...this.state.messages,resp]})\r\n\t}\r\n\tsetUsersList(resp){\r\n\t\tthis.setState({users: resp})\r\n\t}\r\n\r\n\tdisconnectConnection(){\r\n\t\tthis.streamSource.close()\r\n\t\tthis.props.onDisconnect()\r\n\t}\r\n\tcomponentDidMount (){\r\n\t\t//this.scrollToBottom();\r\n\t\t this.streamSource.addEventListener(\"ServerStatus\", (event) => {\r\n\t\t   this.setMessageList({'message': JSON.parse(event.data).status, 'user': 'Server', \r\n\t\t   \t'created': JSON.parse(event.data).created})\t\t  \r\n\t\t});\r\n\t\t this.streamSource.addEventListener(\"Message\", (event) => {\r\n\t\t   this.setMessageList(JSON.parse(event.data))\r\n\t\t});\r\n\t\t this.streamSource.addEventListener(\"Users\", (event) => {\r\n\t\t   this.setUsersList(JSON.parse(event.data).users)\r\n\t\t});\r\n\t\t this.streamSource.addEventListener(\"Join\", (event) => {\r\n\t\t   this.joinUsersList({'message': JSON.parse(event.data).user, 'user': 'Server', \r\n\t\t   \t'created': JSON.parse(event.data).created})\r\n\t\t});\r\n\t\t this.streamSource.addEventListener(\"Part\", (event) => {\r\n\t\t   this.partUsersList({'message': JSON.parse(event.data).user, 'user': 'Server', \r\n\t\t   \t'created': JSON.parse(event.data).created})\r\n\t\t});\r\n\t\t this.streamSource.addEventListener(\"Disconnect\", (event) => {\r\n\t\t   this.disconnectConnection()\r\n\t\t});\r\n\t}\r\n\tsendMessage(message){\r\n\t\tvar form = new FormData();\r\n\t    form.append(\"message\", message);\r\n\t    const url = this.state.url;\r\n\t    var request = new XMLHttpRequest();\r\n\t    request.open(\"POST\", url + \"/message\");\r\n\t    const userToken = this.state.token\r\n\t    request.setRequestHeader(\r\n\t        \"Authorization\",\r\n\t        \"Bearer \" + this.state.token\r\n\t    );\r\n\t    request.send(form);\r\n\t}\r\n\tchangeScrollState(state){\r\n\t\tthis.atBottom = state\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"ChatScreen\">\r\n\t\t\t\t<div className=\"ChatHeader\">\r\n\t\t\t\t\t<h1 className=\"ChatHeaderText\">Enjoy your chat {this.state.currentUser}</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div ref={this.messageListRef} className=\"ChatDetails\">\r\n\t\t\t\t\t<OnlineUsers onlineUsers={this.state.users}/>\r\n\t\t\t\t\t<MessageList  messages={this.state.messages}\r\n\t\t\t\t\t\t\t\tchangeScrollState={this.changeScrollState} \r\n\t\t\t\t\t\t\t\tatBottom={this.atBottom}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Message-input-block\">\r\n\t\t\t\t\t<SendMessageForm onSubmit={this.sendMessage} />\r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t</div>\r\n\t\t\t)\t\t\r\n\t}\r\n}\r\nexport default ChatScreen","import React, { Component } from 'react';\nimport './App.css';\nimport Userlogin from './Userlogin'\nimport ChatScreen from './ChatScreen'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      currentScreen: sessionStorage.getItem( 'currentScreen' ) || 'LoginScreen',\n      currentUsername: sessionStorage.getItem( 'currentUsername' ) || '',\n      token: sessionStorage.getItem( 'token' ) || '',\n      url: 'http://chat.cs291.com/'\n    }\n    this.onUserloginSubmit = this.onUserloginSubmit.bind(this)\n    this.onDisconnect = this.onDisconnect.bind(this)\n  }\n\n  onUserloginSubmit (username, password, url){\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    var request = new XMLHttpRequest();\n    var form = new FormData();\n    form.append(\"password\", password);\n    form.append(\"username\", username);\n    sessionStorage.url = url;\n    request.open(\"POST\", sessionStorage.url + \"/login\");\n    request.onreadystatechange = function(){\n        if (request.readyState !== 4) return;\n        if (request.status === 201) {\n            sessionStorage.setItem( 'token', JSON.parse(request.responseText).token);\n            sessionStorage.setItem( 'currentScreen',\"ChatScreen\");\n            sessionStorage.setItem( 'currentUsername',username);\n            this.setState({\n            currentUsername: username,\n            currentScreen: sessionStorage.getItem( 'currentScreen'),\n            token: sessionStorage.getItem( 'token' )\n            });\n        } else if (this.status === 403) {\n            alert(\"Invalid username or password\");\n        } else {\n            alert(this.status + \" failure to /login\");\n        }\n    }.bind(this);\n    request.send(form);  \n    \n  }\n  onDisconnect(){\n    this.setState({currentScreen: 'LoginScreen'})\n  }\n  render() {\n    if(this.state.currentScreen === 'LoginScreen'){\n     return <Userlogin onSubmit={this.onUserloginSubmit} \n     url={this.state.url}/>\n    }\n    else if(this.state.currentScreen === 'ChatScreen'){\n      return <ChatScreen token={this.state.token}\n                         username ={this.state.currentUsername}\n                         url={sessionStorage.url}\n                         onDisconnect={this.onDisconnect} />\n    }\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}